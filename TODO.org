* 27 February, 2023
- [ ] Build an endpoint for Admin
- [ ] Make functions for assembly line
- [ ] Build an endpoint for assembly line
- [ ] Generate Line Matrices
- [ ] Insert Report info
- [ ] Make report
** Temp
//editUserInfo();
// Assembly line
//createResourceTable()
//registerResource()
//viewRegisterResource()

//registerAssemblyLine()
//setLayout()
//useResource()
//removeResource()
//getLayout()

#+begin_src javascript
  function getUserIdForUser(username){
      const sql_query = "select userid from user where username='"+username+"';"; 
      connection.query(sql_query, (err, results, fields)=>{
	  if(err) throw err;
	  sharedData["userid"] = results[0].userid;
      });

      return 1;
  }
#+end_src

* Future Task
- [ ] Deploy the nmf
- [ ] Make an endpoint for it
- [ ] Run a js that runs once every second and knocks the python endpoint with an image, asking if its congestion or not.

* Backend
get photo from camera
send photo to model 
return result 

client --> get info for workstation id = 3 
backend --> return boolean result from an array that stores the result
Array: Update it every minute
      - send get request to fastAPI to return array of congestion states, given machineId list 
FastAPI: accept an array, return correspoing result array 

Processing: Fast API Accepts the array. 
            loads image for each machine. (The folders are renamed with machine Id.)
            sends the image to nmf code one by one 

* TODO
- [X] Find a proper dataset, if none exists, make one. [clothstackdetectionvariablestack.mp4]
- [X] Train
- [X] Make some folders 
- [X] Validate request
- [ ] Update array every one minute

- [ ] congestion reason, video upload , view image of congestion 

* Boundary cases 
- [ ] notification is clickable 
- [ ] 