 1. App crashes (throw err): Solution - It is not a bug rather a feature of development. We want error to occur everytime something does not go as expected.
 2. Layout: Total production should include sum of bottleneck of all lines.
 3. Select LC for each assembly line
 4. Add "action" column in notification table
 5. View resources feature

* Bugs
- [X] link production report with PM
- [X] Logout function in supervisor
- [X] Frontend Access Control
  #+begin_src text
  if(!validHash) redirect "login pls!"
  #+end_src
- [X] Add user (delete mechanic)
- [X] Line chief dont get assembly line layout notification
- [X] Notification on report submission
** DB Changes
1. Assembly Line Layout, hourly production report, quality report: ProductionId
2. Assembly Line Layout: Hourly Target
3. Update Image filepath for each profile
* Todo
- Finalize Production
- Monitor Congestion
- Submit report
** LC Workflow
1. [X] Make backend for layout view
2. [X] Make Frontend for layout view
3. [X] Register LC
4. [X] Assign LC
5. [ ] Save total target in some table (e.g. assembly line, production, hourly report)
6. [X] Notify LC on assignment
7. [X] Notify LC on layout set
8. [X] LC Access Control
9. [X] LC Views notification on layout change and clicks it to see the layout
10. [ ] Request Resource form, this will need a separate table
11. [ ] Set Production Target for each machine
** Congestion
- [ ] Congestion table
- [ ] API that requests for congestion check after 10s and updates the table
- [ ] API that returns 1 or 0
- [ ] On load, the congestion layout view will have borders in it for congestion.
- [ ] Bordered items should be clickable. On click, a notificaiton will be sent to supervisor.
** Supervisor
- [X] Login & Access Control
- [ ] Click notification on congestion (Lead the supervisor the layout view)
- [ ] There will be a form below. Insert reason for congestion.
- [ ] Connect the other two forms to backend if possible.

* Entities
User (ID, name, password, designation, age, general info)
Notification (notification ID, sender ID, receiver ID, time sent, message)
Assembly line (line ID, line chef ID, no of machine, Matrices, Line efficiency, Resource Utilization Index, ~Possible Bottleneck points~)
Assembly line layout (layout ID, line ID, types of machines and table, size of product, required types of work)
Congestion (congestion id, report id, congestion time, congestion reason)
Resources ( machine ID, ~line ID~, machine model, machine type, machine hourly production, other info)
Quality report (report ID, rejected product, rejected workstation,rejection reason)
Production report (report ID, hourly count, number of rejected product, hourly production, number of accepted product etc)
Design file (product ID, line ID, Product, Types of Tasks, Sizes of the Cutting Pieces, Size of the Final Product, Number of Products)

* Debugging
** Image upload
[[https://www.youtube.com/watch?v=MzShBGTUBhE][Frontend]] ain't working.
- [X] My old code on profile image. It worked!
- [ ] [[https://www.youtube.com/watch?v=bGTKu3Bn-z8][That video]] code on profile image.
- [ ] Google on uploading photoes from angular,multer.

  [[https://stackoverflow.com/questions/51483507/how-to-save-and-show-the-picture-saved-using-multer-package-in-nodejs][Backend of Image upload]]

  Backend not working:
- [X] Try basic multer documentation code
- [ ] Google on this issue as it seems like a common issue.
- [ ] Google on multer examples
- [ ] Try more on that stackoverflow answer

  Send Image From Backend to Frontend:
  - [ ] Same directory, bad solution
  - [ ] Youtube on it
  - [ ] Google on it
** Version Controlling
Version 1
#+begin_src js
  const express = require('express');
const multer = require('multer');
const path = require('path');

// Image Upload
const imageStorage = multer.diskStorage({
    destination: 'images', // Destination to store image 
    filename: (req, file, cb) => {
        cb(null, file.fieldname + '_' + Date.now() + path.extname(file.originalname))
        // file.fieldname is name of the field (image), path.extname get the uploaded file extension
    }
});

const imageUpload = multer({
    storage: imageStorage,
    limits: {
        fileSize: 1000000   // 1000000 Bytes = 1 MB
    },
    fileFilter(req, file, cb) {
        if (!file.originalname.match(/\.(png|jpg)$/)) {     // upload only png and jpg format
            return cb(new Error('Please upload a Image'))
        }
        cb(undefined, true)
    }
})  


// Starting server
const cors = require('cors')
const app = express();
app.use(cors());
app.options('*', cors());
app.use(express.json());
const PORT = 2050;
app.listen(PORT, ()=>{
    console.log("Server has started running at port "+PORT+ "!");
});


// For Single image upload
app.post('/uploadImage', imageUpload.single('profile'), (req, res) => {
    console.log("uploading image...");
    res.send({"Status": "Successfully uploaded image!"});
}, (error, req, res, next) => {
    res.status(400).send({ error: error.message })
})

// For Multiple image upload
app.post('/uploadBulkImage', imageUpload.array('images', 4), (req, res) => {
    res.send(req.files)
}, (error, req, res, next) => {
    res.status(400).send({ error: error.message })
})

// ---------------------------------------------------------------------------- //

// Video Upload
const videoStorage = multer.diskStorage({
    destination: 'videos', // Destination to store video 
    filename: (req, file, cb) => {
        cb(null, file.fieldname + '_' + Date.now() + path.extname(file.originalname))
    }
});

const videoUpload = multer({
    storage: videoStorage,
    limits: {
        fileSize: 10000000   // 10000000 Bytes = 10 MB
    },
    fileFilter(req, file, cb) {
        if (!file.originalname.match(/\.(mp4|MPEG-4)$/)) {     // upload only mp4 and mkv format
            return cb(new Error('Please upload a Video'))
        }
        cb(undefined, true)
    }
})

app.post('/uploadVideo', videoUpload.single('video'), (req, res) => {
    res.send(req.file)
}, (error, req, res, next) => {
    res.status(400).send({ error: error.message })
})


#+end_src

Version 2
#+begin_src js
  const express = require("express");
const app = express();
const controller = require("./controller.js");
var cors = require('cors')
app.use(cors());
app.options('*', cors());

app.use(express.json());
const PORT = 2050;

app.listen(PORT, ()=>{
    console.log("The server has started running at port "+ PORT +"!");
});


const multer  = require('multer')
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, './images')
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
    cb(null, file.fieldname + '-' + uniqueSuffix)
  }
})

const upload = multer({ storage: storage })
app.post("/uploadImage", upload.single('profile'), (req, res) => controller.saveImageRequest(req,res));

#+end_src

Version 3
#+begin_src js
  const express = require("express");
const app = express();
const controller = require("./controller.js");
var cors = require('cors')
app.use(cors());
app.options('*', cors());

app.use(express.json());
const PORT = 2050;

app.listen(PORT, ()=>{
    console.log("The server has started running at port "+ PORT +"!");
});


const multer  = require('multer')
const path = require('path');

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, './images/'));
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
	console.log(Date.now() + path.extname(file.originalname));
    }

})

//check image
const isImage = (req, file, cb) => {
    if (file.mimetype.startsWith("image")) {
        cb(null, true);
    }
    else {
        cb(null, { error: "Only image" });
    }
}

const upload = multer({
    storage: storage,
    fileFilter: isImage
});
//app.post("/uploadImage", upload.single('profile'), (req, res) => {});
app.post("/uploadImage", upload.single('profile'), (req, res) => controller.saveImageRequest(req,res));

#+end_src

Version 4 - chatGPT generated
#+begin_src js
  const express = require("express");
const app = express();
const multer = require("multer");
const path = require("path");

var cors = require('cors')
app.use(cors());
app.options('*', cors());


// Configure multer storage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, "images"));
  },
  filename: (req, file, cb) => {
    const filename = Date.now() + path.extname(file.originalname);
    cb(null, filename);
  }
});

// Create multer upload instance
const upload = multer({ storage });

app.use(express.json());

// Handle POST request for image upload
app.post("/uploadImage", upload.single("profile"), (req, res) => {
  // File upload successful
  console.log("File saved:", req.file);

  // Send response
  res.status(200).json({ message: "Image uploaded successfully" });
});

const PORT = 2050;
app.listen(PORT, () => {
  console.log("The server has started running at port " + PORT + "!");
});

#+end_src
