{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/constants.service\";\nexport class DownloadDataComponent {\n  constructor(constantsService) {\n    this.constantsService = constantsService;\n  }\n  downloadDatabase() {\n    var csv = 'a,b,c\\n1,2,3\\n';\n    let url = this.constantsService.SERVER_IP_ADDRESS + \"admin\";\n    let data = {\n      \"operation\": \"gadd\",\n      \"userHash\": userHash\n    };\n    //{\"operation\":\"rnu\", \"username\":username, \"password\":password, \"age\":age, \"generalInfo\":generalInfo};\n    fetch(url, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    }).then(resolve => {\n      console.log(\"Download Data Request has been resolved!\");\n      return resolve.json();\n    }).then(data => {\n      console.log(data);\n      let content = new Blob([JSON.stringify(data.Datasets)]);\n      let a = document.getElementById('downloadDataLink');\n      a.href = URL.createObjectURL(content);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n}\nDownloadDataComponent.ɵfac = function DownloadDataComponent_Factory(t) {\n  return new (t || DownloadDataComponent)(i0.ɵɵdirectiveInject(i1.ConstantsService));\n};\nDownloadDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DownloadDataComponent,\n  selectors: [[\"app-download-data\"]],\n  decls: 7,\n  vars: 0,\n  consts: [[\"id\", \"downloadData\", 1, \"row\"], [1, \"p-5\", \"text-center\", \"bg-light\"], [1, \"mb-3\"], [\"id\", \"downloadDataLink\", \"download\", \"Download.txt\", \"type\", \"text\"], [\"type\", \"submit\", \"id\", \"btndownloadAllData\", 1, \"btn\", \"btn-default\", 3, \"click\"]],\n  template: function DownloadDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h4\", 2);\n      i0.ɵɵtext(3, \"Admin Access\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"a\", 3)(5, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function DownloadDataComponent_Template_button_click_5_listener() {\n        return ctx.downloadDatabase();\n      });\n      i0.ɵɵtext(6, \"Download All Data\");\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,qBAAqB;EAEhCC,YAAoBC,gBAAkC;IAAlC,qBAAgB,GAAhBA,gBAAgB;EAAoB;EAExDC,gBAAgB;IACd,IAAIC,GAAG,GAAG,gBAAgB;IAE1B,IAAIC,GAAG,GAAG,IAAI,CAACH,gBAAgB,CAACI,iBAAiB,GAAG,OAAO;IAC3D,IAAIC,IAAI,GAAG;MACP,WAAW,EAAC,MAAM;MAClB,UAAU,EAAEC;KACf;IAED;IACAC,KAAK,CAACJ,GAAG,EAAE;MACPK,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,UAAU;MACjBC,WAAW,EAAE,aAAa;MAC1BC,OAAO,EAAE;QACT,cAAc,EAAE;QAChB;OACC;;MACDC,QAAQ,EAAE,QAAQ;MAClBC,cAAc,EAAE,aAAa;MAC7BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAE;KAC/B,CAAC,CACDa,IAAI,CAAEC,OAAO,IAAG;MACbC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD,OAAOF,OAAO,CAACG,IAAI,EAAE;IACzB,CAAC,CAAC,CACDJ,IAAI,CAAEb,IAAI,IAAG;MACVe,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC;MACjB,IAAIkB,OAAO,GAAG,IAAIC,IAAI,CAAC,CAACR,IAAI,CAACC,SAAS,CAACZ,IAAI,CAACoB,QAAQ,CAAC,CAAC,CAAC;MACvD,IAAIC,CAAC,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;MACnDF,CAAC,CAACG,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACR,OAAO,CAAC;IACzC,CAAC,CAAC,CACDS,KAAK,CAAEC,GAAG,IAAG;MACdb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;IAChB,CAAC,CAAC;EACN;;AAxCanC,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAoC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCRlCC,8BAAmC;MAERA,4BAAY;MAAAA,iBAAK;MAEpCA,4BAA6D;MACfA;QAAA,OAASC,sBAAkB;MAAA,EAAC;MAAyBD,iCAAiB;MAAAA,iBAAS","names":["DownloadDataComponent","constructor","constantsService","downloadDatabase","csv","url","SERVER_IP_ADDRESS","data","userHash","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","then","resolve","console","log","json","content","Blob","Datasets","a","document","getElementById","href","URL","createObjectURL","catch","err","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/abhijit/Assembly-Line-Management-System/frontend/src/app/admin-dashboard/download-data/download-data.component.ts","/home/abhijit/Assembly-Line-Management-System/frontend/src/app/admin-dashboard/download-data/download-data.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ConstantsService } from 'src/app/services/constants.service';\n\n@Component({\n  selector: 'app-download-data',\n  templateUrl: './download-data.component.html',\n  styleUrls: ['./download-data.component.css']\n})\nexport class DownloadDataComponent {\n\n  constructor(private constantsService: ConstantsService){}\n\n  downloadDatabase(): void{\n    var csv = 'a,b,c\\n1,2,3\\n';\n\n    let url = this.constantsService.SERVER_IP_ADDRESS + \"admin\";\n    let data = {\n        \"operation\":\"gadd\",\n        \"userHash\": userHash\n    }\n    \n    //{\"operation\":\"rnu\", \"username\":username, \"password\":password, \"age\":age, \"generalInfo\":generalInfo};\n    fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, *cors, same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n    .then((resolve)=>{\n        console.log(\"Download Data Request has been resolved!\");\n        return resolve.json()\n    })\n    .then((data)=>{\n        console.log(data);\n        let content = new Blob([JSON.stringify(data.Datasets)]);\n        let a = document.getElementById('downloadDataLink');\n        a.href = URL.createObjectURL(content);\n    })\n    .catch((err)=>{\n    console.log(err);\n    });\n}\n\n}\n","<div class=\"row\" id=\"downloadData\">\n    <div class=\"p-5 text-center bg-light\">\n          <h4 class=\"mb-3\">Admin Access</h4>\n        </div>\n        <a id='downloadDataLink' download='Download.txt' type='text'>\n        <button type=\"submit\" class=\"btn btn-default\" (click)=\"downloadDatabase()\" id=\"btndownloadAllData\">Download All Data</button>\n        </a>\n  </div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}