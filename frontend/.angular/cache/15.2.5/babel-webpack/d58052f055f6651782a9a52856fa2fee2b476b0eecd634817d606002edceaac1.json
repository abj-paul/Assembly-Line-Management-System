{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n    this.username = \"\";\n    this.password = \"\";\n  }\n  authenticate() {\n    const success = this.userService.authenticate(this.username, this.password);\n    if (!success) {\n      this.router.navigate(['invalid-credentials']);\n    } else this.router.navigate(['profile']);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;IAH5D,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;EAEiD;EAEtEC,YAAY;IACV,MAAMC,OAAO,GAAG,IAAI,CAACH,WAAW,CAACE,YAAY,CAAC,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;IAC3E,IAAG,CAACF,OAAO,EAAC;MACV,IAAI,CAACF,MAAM,CAACK,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;KAC9C,MAAK,IAAI,CAACL,MAAM,CAACK,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;EACzC;CACD;AAZYR,cAAc,eAL1BD,SAAS,CAAC;EACTU,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWX,cAAc,CAY1B;SAZYA,cAAc","names":["Component","LoginComponent","constructor","userService","router","authenticate","success","username","password","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/abhijit/Assembly-Line-Management-System/frontend/src/app/login/login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../registration/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  username: string = \"\";\n  password: string = \"\";\n\n  constructor(private userService: UserService, private router: Router){}\n\n  authenticate(){\n    const success = this.userService.authenticate(this.username, this.password);\n    if(!success){\n      this.router.navigate(['invalid-credentials']);\n    }else this.router.navigate(['profile']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}